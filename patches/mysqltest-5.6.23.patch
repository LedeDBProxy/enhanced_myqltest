--- mysql-5.6.25/client/mysqltest.cc	2015-05-05 19:05:53.000000000 +0800
+++ new/client/mysqltest.cc	2015-07-09 11:10:33.918726851 +0800
@@ -290,6 +290,32 @@
 
 HASH var_hash;
 
+#define MAX_STMT_ENTRY 256
+#define MAX_QUERY_LEN 256
+
+typedef struct stmt_entry
+{
+    MYSQL_STMT* stmt;
+    char query[MAX_QUERY_LEN];
+} stmt_entry;
+
+
+static MYSQL_STMT *find_stmt(stmt_entry *all, char *query)
+{
+    int i;
+    for (i = 0; i < MAX_STMT_ENTRY; i++) {
+        if (all[i].query != NULL) {
+            if (strcmp(all[i].query, query) == 0) {
+                return all[i].stmt;
+            }
+        } else {
+            break;
+        }
+    }
+
+    return NULL;
+}
+
 struct st_connection
 {
   MYSQL mysql;
@@ -298,6 +324,9 @@
   char *name;
   size_t name_len;
   MYSQL_STMT* stmt;
+  stmt_entry all_stmts[MAX_STMT_ENTRY];
+  int num_stmt;
+
   /* Set after send to disallow other queries before reap */
   my_bool pending;
 
@@ -352,7 +381,7 @@
   Q_QUERY_VERTICAL, Q_QUERY_HORIZONTAL, Q_SORTED_RESULT,
   Q_LOWERCASE,
   Q_START_TIMER, Q_END_TIMER,
-  Q_CHARACTER_SET, Q_DISABLE_PS_PROTOCOL, Q_ENABLE_PS_PROTOCOL,
+  Q_CHARACTER_SET, Q_DISABLE_PS_PROTOCOL, Q_TEMP_DISABLE_PS_PROTOCOL, Q_ENABLE_PS_PROTOCOL,
   Q_DISABLE_RECONNECT, Q_ENABLE_RECONNECT,
   Q_IF,
   Q_DISABLE_PARSING, Q_ENABLE_PARSING,
@@ -431,6 +460,7 @@
   "end_timer",
   "character_set",
   "disable_ps_protocol",
+  "temp_disable_ps_protocol",
   "enable_ps_protocol",
   "disable_reconnect",
   "enable_reconnect",
@@ -1290,7 +1320,8 @@
     emb_close_connection(next_con);
 #endif
     if (next_con->stmt)
-      mysql_stmt_close(next_con->stmt);
+        mysql_stmt_close(next_con->stmt);
+
     next_con->stmt= 0;
     mysql_close(&next_con->mysql);
     if (next_con->util_mysql)
@@ -1304,13 +1335,22 @@
 
 void close_statements()
 {
+  int i;
   struct st_connection *con;
   DBUG_ENTER("close_statements");
   for (con= connections; con < next_con; con++)
   {
-    if (con->stmt)
-      mysql_stmt_close(con->stmt);
-    con->stmt= 0;
+      for (i = 0; i < con->num_stmt; i++) {
+          if (con->all_stmts[i].stmt != NULL && (con->all_stmts[i].stmt)->stmt_id > 0) {
+              mysql_stmt_close(con->all_stmts[i].stmt);
+              con->all_stmts[i].stmt= NULL;
+          } else {
+              break;
+          }
+      }
+      con->num_stmt= 0;
+
+      con->stmt= 0;
   }
   DBUG_VOID_RETURN;
 }
@@ -1466,8 +1506,8 @@
     Help debugging by displaying any warnings that might have
     been produced prior to the error
   */
-  if (cur_con && !cur_con->pending)
-    show_warnings_before_error(&cur_con->mysql);
+  /*if (cur_con && !cur_con->pending)
+    show_warnings_before_error(&cur_con->mysql);*/
 
   cleanup_and_exit(1);
 }
@@ -4700,7 +4740,7 @@
 }
 
 
-void do_set_charset(struct st_command *command)
+void do_set_charset(MYSQL* mysql, struct st_command *command)
 {
   char *charset_name= command->first_argument;
   char *p;
@@ -4717,6 +4757,9 @@
   charset_info= get_charset_by_csname(charset_name,MY_CS_PRIMARY,MYF(MY_WME));
   if (!charset_info)
     abort_not_supported_test("Test requires charset '%s'", charset_name);
+  else
+    mysql_set_character_set(mysql, charset_info->csname);
+
 }
 
 
@@ -5197,6 +5240,7 @@
 {
   DBUG_ENTER("close_connection");
 
+  int i;
   struct st_connection *con;
   static DYNAMIC_STRING ds_connection;
   const struct command_arg close_connection_args[] = {
@@ -5231,8 +5275,16 @@
   */
   emb_close_connection(con);
 #endif /*EMBEDDED_LIBRARY*/
-  if (con->stmt)
-    mysql_stmt_close(con->stmt);
+  for (i = 0; i < con->num_stmt; i++) {
+      if (con->all_stmts[i].stmt != NULL && (con->all_stmts[i].stmt)->stmt_id > 0) {
+          mysql_stmt_close(con->all_stmts[i].stmt);
+          con->all_stmts[i].stmt= NULL;
+      } else {
+          break;
+      }
+  }
+  con->num_stmt= 0;
+
   con->stmt= 0;
 
   mysql_close(&con->mysql);
@@ -7694,6 +7746,7 @@
   DBUG_ENTER("run_query_stmt");
   DBUG_PRINT("query", ("'%-.60s'", query));
 
+  cur_con->stmt = find_stmt(cur_con->all_stmts, query);
   /*
     Init a new stmt if it's not already one created for this connection
   */
@@ -7701,7 +7754,12 @@
   {
     if (!(stmt= mysql_stmt_init(mysql)))
       die("unable to init stmt structure");
+    if (cur_con->num_stmt >= MAX_STMT_ENTRY) {
+      die("too many prepared stmts");
+    }
     cur_con->stmt= stmt;
+    cur_con->all_stmts[cur_con->num_stmt].stmt= stmt;
+    strncpy(cur_con->all_stmts[cur_con->num_stmt++].query, query, MAX_QUERY_LEN);
   }
 
   /* Init dynamic strings for warnings */
@@ -7714,11 +7772,14 @@
   /*
     Prepare the query
   */
-  if (mysql_stmt_prepare(stmt, query, query_len))
-  {
-    handle_error(command,  mysql_stmt_errno(stmt),
-                 mysql_stmt_error(stmt), mysql_stmt_sqlstate(stmt), ds);
-    goto end;
+  if (stmt->stmt_id > 0) {
+  } else {
+      if (mysql_stmt_prepare(stmt, query, query_len))
+      {
+          handle_error(command,  mysql_stmt_errno(stmt),
+                  mysql_stmt_error(stmt), mysql_stmt_sqlstate(stmt), ds);
+          goto end;
+      }
   }
 
   /*
@@ -9092,8 +9153,11 @@
 	timer_output();
 	break;
       case Q_CHARACTER_SET:
-	do_set_charset(command);
+	do_set_charset(&cur_con->mysql, command);
 	break;
+      case Q_TEMP_DISABLE_PS_PROTOCOL:
+        set_property(command, P_PS, 0);
+        break;
       case Q_DISABLE_PS_PROTOCOL:
         set_property(command, P_PS, 0);
         /* Close any open statements */
